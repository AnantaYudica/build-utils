if (NOT DEFINED ASSERT_DEBUG)
    set(ASSERT_DEBUG FALSE CACHE BOOL "debug mode" FORCE)
endif()

function(assert_condition is_not is_equal is_less is_greater is_str a b a_name b_name result msg)
    set(res FALSE)
    set(operator "")
    set(not_operator_bg "")
    set(not_operator_ed "")
    if(is_less)
        set(operator "<")
        if(is_equal)
            if(is_str)
                if("${a}" STRLESS "${b}" OR ("${a}" STREQUAL "${b}"))
                    set(res TRUE)
                endif()
            else()
                if(${a} LESS ${b} OR (${a} EQUAL ${b}))
                    set(res TRUE)
                endif()
            endif()
        else()
            if(is_str)
                if("${a}" STRLESS "${b}")
                    set(res TRUE)
                endif()
            else()
                if(${a} LESS ${b})
                    set(res TRUE)
                endif()
            endif()
        endif()
    elseif(is_greater)
        set(operator ">")
        if(is_equal)
            if(is_str)
                if("${a}" STRGREATER "${b}" OR ("${a}" STREQUAL "${b}"))
                    set(res TRUE)
                endif()
            else()
                if(${a} GREATER ${b} OR (${a} EQUAL ${b}))
                    set(res TRUE)
                endif()
            endif()
        else()
            if(is_str)
                if("${a}" STRGREATER "${b}")
                    set(res TRUE)
                endif()
            else()
                if(${a} GREATER ${b})
                    set(res TRUE)
                endif()
            endif()
        endif()
    elseif(is_equal)
        set(operator "=")
        if(is_str)
            if("${a}" STREQUAL "${b}")
                set(res TRUE)
            endif()
        else()
            if(${a} EQUAL ${b})
                set(res TRUE)
            endif()
        endif()
    else()
        message(FATAL_ERROR "Error Condition Not Set")
    endif()

    if(is_equal)
        set(operator "${operator}=")
    endif()

    if(is_not)
        set(not_operator_bg "NOT (")
        set(not_operator_ed ")")
        if(res)
            set(res FALSE)
        else()
            set(res TRUE)
        endif()
    endif()

    set(${result} ${res} PARENT_SCOPE)
    if (NOT res)
        if(is_str)
            set(${msg} "${not_operator_bg} ${a_name}(\"${a}\") ${operator} ${b_name}(\"${b}\") ${not_operator_ed}" PARENT_SCOPE)
        else()
            set(${msg} "${not_operator_bg} ${a_name}(${a}) ${operator} ${b_name}(${b}) ${not_operator_ed}" PARENT_SCOPE)
        endif()
    endif()
endfunction(assert_condition)

function(assert_debug msg)
    if (ASSERT_DEBUG)
        message(STATUS "${msg}")
    endif()
endfunction(assert_debug)

function(assert)
    string(CONCAT boolean_option
        "DEBUG;NOT;EQUAL;LESS;GREATER;STR;FOREACH;CONTAIN;COUNT" 
        ";DISTINCT;SORT")
    cmake_parse_arguments(assert "${boolean_option}"
        "CALL;RESULT;COUNT_IF_EQUAL;COUNT_IF_STREQUAL" "LIST_RESULT;ARGS" ${ARGN}) 
    set(debug_before ${ASSERT_DEBUG})
    set(ASSERT_DEBUG ${assert_DEBUG} CACHE BOOL "debug mode" FORCE)

    assert_debug("args : ${ARGN}")

    if("${EMPTY}${assert_CALL}" STREQUAL "${EMPTY}" OR (NOT EXISTS "${assert_CALL}"))
        include(${TEST_UTILS_DIR}/assert/call.cmake)
    else()
        include(${assert_CALL})
    endif()

    set(condition FALSE)
    
    set(out "")
    assert_call(OUTPUT out ARGS ${assert_ARGS})
    assert_debug("Call Output : ${out}")

    set(enable_count_if_equal FALSE)
    set(enable_count_if_strequal FALSE)
    if (NOT "${EMPTY}${assert_COUNT_IF_EQUAL}" STREQUAL "${EMPTY}")
        set(enable_count_if_equal TRUE)
        set(assert_COUNT TRUE)
    elseif (NOT "${EMPTY}${assert_COUNT_IF_STREQUAL}" STREQUAL "${EMPTY}")
        set(enable_count_if_strequal TRUE)
        set(assert_COUNT TRUE)
    endif()

    if (assert_COUNT)
        set(count 0)
    endif()

    if(assert_FOREACH)
        if (assert_DISTINCT)
            list(REMOVE_DUPLICATES out)
            list(REMOVE_DUPLICATES assert_LIST_RESULT)
        endif()

        if (assert_SORT)
            list(SORT out)
            list(SORT assert_LIST_RESULT)
        endif()

        list(LENGTH out out_len)
        list(LENGTH assert_LIST_RESULT result_len)
        foreach(it RANGE 1 ${out_len} 1)
            math(EXPR index "${it}-1")
            list(GET out ${index} element_out)
            if (assert_CONTAIN)
                set(contain_condition FALSE)
                set(contain_msg "")
                foreach(inner_it RANGE 1 ${result_len} 1)
                    math(EXPR inner_index "${inner_it}-1")
                    list(GET assert_LIST_RESULT ${inner_index} element_result)
                    assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
                        ${assert_GREATER} ${assert_STR} ${element_result} ${element_out} 
                        "result[${inner_index}]" "output[${index}]" condition msg)
                    if ("${EMPTY}${contain_msg}" STREQUAL "${EMPTY}")
                        string(CONCAT contain_msg "${msg}")
                    else()
                        string(CONCAT contain_msg "${contain_msg}" ", " "${msg}")
                    endif()
                    if (condition)
                        set(contain_condition TRUE)
                        break()
                    endif()
                endforeach(inner_it)
                if (NOT contain_condition)
                    message(FATAL_ERROR "Error Assert Condition : { ${contain_msg} }")
                    break()
                endif()
            elseif (assert_COUNT)
                set(condition FALSE)
                if (enable_count_if_equal)
                    if (${assert_COUNT_IF_EQUAL} EQUAL ${element_out})
                        set(condition TRUE)
                    endif()
                elseif (enable_count_if_strequal)
                    if ("${assert_COUNT_IF_STREQUAL}" STREQUAL "${element_out}")
                        set(condition TRUE)
                    endif()
                else()
                    set(condition TRUE)
                endif()

                if(condition)
                    math(EXPR count "${count}+1")
                endif()
            else()
                list(GET assert_LIST_RESULT ${index} element_result)
                assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
                    ${assert_GREATER} ${assert_STR} ${element_result} ${element_out} 
                    "result[${index}]" "output[${index}]" condition msg)
                if(NOT condition)
                    message(FATAL_ERROR "Error Assert Condition : ${msg}")
                    break()
                endif()
            endif()
        endforeach()
        if (assert_COUNT)
            assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
                ${assert_GREATER} ${assert_STR} ${assert_RESULT} ${count} 
                "result" "count" condition msg)
            if(NOT condition)
                message(FATAL_ERROR "Error Assert Condition : ${msg}")
            endif()
        endif()
    else()
        assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
            ${assert_GREATER} ${assert_STR} ${assert_RESULT} ${out}  
            "result" "output" condition msg)
        if(NOT condition)
            message(FATAL_ERROR "Error Assert Condition : ${msg}")
        endif()
    endif()

    set(ASSERT_DEBUG ${debug_before} CACHE BOOL "debug mode" FORCE)

endfunction(assert)
