function(assert_condition is_not is_equal is_less is_greater is_str a b a_name b_name result msg)
    set(res FALSE)
    set(operator "")
    set(not_operator "=")
    if(is_less)
        set(operator "<")
        if(is_equal)
            if(is_str)
                if("${a}" STRLESS "${b}" OR ("${a}" STREQUAL "${b}"))
                    set(res TRUE)
                endif()
            else()
                if(${a} LESS ${b} OR (${a} EQUAL ${b}))
                    set(res TRUE)
                endif()
            endif()
        else()
            if(is_str)
                if("${a}" STRLESS "${b}")
                    set(res TRUE)
                endif()
            else()
                if(${a} LESS ${b})
                    set(res TRUE)
                endif()
            endif()
        endif()
    elseif(is_greater)
        set(operator ">")
        if(is_equal)
            if(is_str)
                if("${a}" STRGREATER "${b}" OR ("${a}" STREQUAL "${b}"))
                    set(res TRUE)
                endif()
            else()
                if(${a} GREATER ${b} OR (${a} EQUAL ${b}))
                    set(res TRUE)
                endif()
            endif()
        else()
            if(is_str)
                if("${a}" STRGREATER "${b}")
                    set(res TRUE)
                endif()
            else()
                if(${a} GREATER ${b})
                    set(res TRUE)
                endif()
            endif()
        endif()
    elseif(is_equal)
        set(operator "=")
        if(is_str)
            if("${a}" STREQUAL "${b}")
                set(res TRUE)
            endif()
        else()
            if(${a} EQUAL ${b})
                set(res TRUE)
            endif()
        endif()
    else()
        message(FATAL_ERROR "Error Condition Not Set")
    endif()

    if(is_equal)
        set(operator "${operator}=")
    endif()

    if(is_not)
        set(not_operator "!")
        if(res)
            set(res FALSE)
        else()
            set(res TRUE)
        endif()
    endif()

    set(${result} ${res} PARENT_SCOPE)
    if (NOT res)
        if(is_str)
            set(${msg} "((${a_name} : \"${a}\") ${operator} (${b_name} : \"${b}\")) ${not_operator}= FALSE" PARENT_SCOPE)
        else()
            set(${msg} "((${a_name} : ${a}) ${operator} (${b_name} : ${b})) ${not_operator}= FALSE" PARENT_SCOPE)
        endif()
    endif()
endfunction(assert_condition)

function(assert)
    cmake_parse_arguments(assert "NOT;EQUAL;LESS;GREATER;STR;FOREACH;CONTAIN" 
        "CALL;RESULT" "LIST_RESULT;ARGS" ${ARGN}) 

    if("${assert_CALL}" STREQUAL "" OR (NOT EXISTS "${assert_CALL}"))
        include(${TEST_UTILS_DIR}/assert/call.cmake)
    else()
        include(${assert_CALL})
    endif()

    set(condition FALSE)
    
    set(out "")
    assert_call(OUTPUT out ARGS ${assert_ARGS})

    if(assert_FOREACH)
        list(LENGTH out out_len)
        list(LENGTH assert_LIST_RESULT result_len)
        foreach(it RANGE 1 ${out_len} 1)
            math(EXPR index "${it}-1")
            list(GET out ${index} element_out)
            if (assert_CONTAIN)
                set(contain_condition FALSE)
                set(contain_msg "")
                foreach(inner_it RANGE 1 ${result_len} 1)
                    math(EXPR inner_index "${inner_it}-1")
                    list(GET assert_LIST_RESULT ${inner_index} element_result)
                    assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
                        ${assert_GREATER} ${assert_STR} ${element_result} ${element_out} 
                        "result[${inner_index}]" "output[${index}]" condition msg)
                    if ("${contain_msg}" STREQUAL "")
                        string(CONCAT contain_msg "${msg}")
                    else()
                        string(CONCAT contain_msg "${contain_msg}" "\n" "${msg}")
                    endif()
                    if (condition)
                        set(contain_condition TRUE)
                        break()
                    endif()
                endforeach(inner_it)
                if (NOT contain_condition)
                    message(FATAL_ERROR "Error Assert Condition ${contain_msg}")
                    break()
                endif()
            else()
                list(GET assert_LIST_RESULT ${index} element_result)
                assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
                    ${assert_GREATER} ${assert_STR} ${element_result} ${element_out} 
                    "result[${index}]" "output[${index}]" condition msg)
                if(NOT condition)
                    message(FATAL_ERROR "Error Assert Condition ${msg}")
                    break()
                endif()
            endif()
        endforeach()
    else()
        assert_condition(${assert_NOT} ${assert_EQUAL} ${assert_LESS} 
            ${assert_GREATER} ${assert_STR} ${assert_RESULT} ${out}  
            "result" "output" condition msg)
        if(NOT condition)
            message(FATAL_ERROR "Error Assert Condition ${msg}")
        endif()
    endif()

endfunction(assert)
